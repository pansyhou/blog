"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6188],{4137:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},p=Object.keys(e);for(i=0;i<p.length;i++)t=p[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(i=0;i<p.length;i++)t=p[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=i.createContext({}),_=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=_(e.components);return i.createElement(o.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},s=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,p=e.originalType,o=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),s=_(t),u=l,m=s["".concat(o,".").concat(u)]||s[u]||d[u]||p;return t?i.createElement(m,r(r({ref:n},c),{},{components:t})):i.createElement(m,r({ref:n},c))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var p=t.length,r=new Array(p);r[0]=s;var a={};for(var o in n)hasOwnProperty.call(n,o)&&(a[o]=n[o]);a.originalType=e,a.mdxType="string"==typeof e?e:l,r[1]=a;for(var _=2;_<p;_++)r[_]=t[_];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}s.displayName="MDXCreateElement"},6736:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return a},metadata:function(){return _},toc:function(){return d}});var i=t(3117),l=t(102),p=(t(7294),t(4137)),r=["components"],a={id:"arm-driver-dev2",slug:"/arm-driver-dev2",title:"ARM-Linux\u9a71\u52a8\u5f00\u53d12",authors:"pansyhou"},o=void 0,_={unversionedId:"skill/Linux/arm-driver-dev2",id:"skill/Linux/arm-driver-dev2",title:"ARM-Linux\u9a71\u52a8\u5f00\u53d12",description:"pinctrl \u548c  gpio \u5b50\u7cfb\u7edf\u5728\xb7",source:"@site/docs/skill/Linux/ARMLinux\u9a71\u52a8\u5f00\u53d12.md",sourceDirName:"skill/Linux",slug:"/arm-driver-dev2",permalink:"/docs/arm-driver-dev2",draft:!1,tags:[],version:"current",frontMatter:{id:"arm-driver-dev2",slug:"/arm-driver-dev2",title:"ARM-Linux\u9a71\u52a8\u5f00\u53d12",authors:"pansyhou"},sidebar:"skill",previous:{title:"ARM-Linux\u9a71\u52a8\u5f00\u53d11",permalink:"/docs/arm-driver-dev1"}},c={},d=[{value:"pinctrl \u548c  gpio \u5b50\u7cfb\u7edf\u5728\xb7",id:"pinctrl-\u548c--gpio-\u5b50\u7cfb\u7edf\u5728",level:2},{value:"pinctrl",id:"pinctrl",level:3},{value:"\u7701\u6d41",id:"\u7701\u6d41",level:4},{value:"GPIO\u5b50\u7cfb\u7edf\u9a71\u52a8",id:"gpio\u5b50\u7cfb\u7edf\u9a71\u52a8",level:3},{value:"GPIO \u9a71\u52a8\u7a0b\u5e8f",id:"gpio-\u9a71\u52a8\u7a0b\u5e8f",level:4},{value:"GPIO\u5b50\u7cfb\u7edfAPI\u51fd\u6570",id:"gpio\u5b50\u7cfb\u7edfapi\u51fd\u6570",level:4},{value:"\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0  gpio \u8282\u70b9\u6a21\u677f",id:"\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0--gpio-\u8282\u70b9\u6a21\u677f",level:4},{value:"\u5e76\u53d1\u4e0e\u7ade\u4e89",id:"\u5e76\u53d1\u4e0e\u7ade\u4e89",level:2},{value:"\u539f\u5b50\u64cd\u4f5c",id:"\u539f\u5b50\u64cd\u4f5c",level:4},{value:"\u539f\u5b50\u4f4d\u64cd\u4f5cAPI",id:"\u539f\u5b50\u4f4d\u64cd\u4f5capi",level:4},{value:"\u81ea\u65cb\u9501",id:"\u81ea\u65cb\u9501",level:4},{value:"\u5176\u4ed6\u7c7b\u578b\u7684\u9501",id:"\u5176\u4ed6\u7c7b\u578b\u7684\u9501",level:4},{value:"\u4fe1\u53f7\u91cf",id:"\u4fe1\u53f7\u91cf",level:3},{value:"\u4e92\u65a5\u4f53",id:"\u4e92\u65a5\u4f53",level:3},{value:"\u5b9e\u4f8b",id:"\u5b9e\u4f8b",level:3},{value:"\u539f\u5b50\u9501",id:"\u539f\u5b50\u9501",level:4},{value:"\u81ea\u65cb\u9501",id:"\u81ea\u65cb\u9501-1",level:4},{value:"\u4fe1\u53f7\u91cf",id:"\u4fe1\u53f7\u91cf-1",level:4},{value:"\u4e92\u65a5\u91cf",id:"\u4e92\u65a5\u91cf",level:4},{value:"\u5b9a\u65f6\u5668",id:"\u5b9a\u65f6\u5668",level:2},{value:"jiffies\u4e0ems/us/ns\u8f6c\u6362\u51fd\u6570",id:"jiffies\u4e0emsusns\u8f6c\u6362\u51fd\u6570",level:4},{value:"\u5185\u6838\u5b9a\u65f6\u5668",id:"\u5185\u6838\u5b9a\u65f6\u5668",level:3},{value:"\u5185\u6838\u77ed\u5ef6\u65f6\u51fd\u6570",id:"\u5185\u6838\u77ed\u5ef6\u65f6\u51fd\u6570",level:4}],s={toc:d};function u(e){var n=e.components,t=(0,l.Z)(e,r);return(0,p.kt)("wrapper",(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"pinctrl-\u548c--gpio-\u5b50\u7cfb\u7edf\u5728"},"pinctrl \u548c  gpio \u5b50\u7cfb\u7edf\u5728\xb7"),(0,p.kt)("p",null,"\u56e0\u4e3a32\u4f4dSOC\u7ecf\u5e38\u4e0eGPIO\u6253\u4ea4\u9053\uff0c\u6240\u4ee5linux\u4e3aPIN\u7684\u914d\u7f6e\uff08\u6bd4\u5982\u4e0a\u4e0b\u62c9\u90a3\u4e9b\uff09\u63d0\u4f9b\u4e86pinctrl\u5b50\u7cfb\u7edf\uff0c\u4e3aGPIO\u7684\u914d\u7f6e\u63d0\u4f9bGPIO\u5b50\u7cfb\u7edf"),(0,p.kt)("h3",{id:"pinctrl"},"pinctrl"),(0,p.kt)("p",null,"\u4e3b\u8981\u5de5\u4f5c\u5185\u5bb9\uff1a"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u83b7\u53d6\u8bbe\u5907\u6811\u4e2d  pin \u4fe1\u606f"),(0,p.kt)("li",{parentName:"ol"},"\u6839\u636e\u83b7\u53d6\u5230\u7684  pin \u4fe1\u606f\u6765\u8bbe\u7f6e  pin \u7684\u590d\u7528\u529f\u80fd"),(0,p.kt)("li",{parentName:"ol"},"\u6839\u636e\u83b7\u53d6\u5230\u7684  pin \u4fe1\u606f\u6765\u8bbe\u7f6e  pin \u7684\u7535\u6c14\u7279\u6027\uff0c\u6bd4\u5982\u4e0a/\u4e0b\u62c9\u3001\u901f\u5ea6\u3001\u9a71\u52a8\u80fd\u529b\u7b49")),(0,p.kt)("p",null,"\u6211\u4eec\u53ea\u7528\u5728\u8bbe\u5907\u6811\u91cc\u9762",(0,p.kt)("strong",{parentName:"p"},"\u8bbe\u7f6e\u597d\u67d0\u4e2apin\u7684\u76f8\u5173\u5c5e\u6027\u5373\u53ef"),"\uff0c\u5176\u4ed6\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u5747\u7531pinctrl\u5b50\u7cfb\u7edf\u6765\u5b8c\u6210\uff0cpinctrl \u5b50\u7cfb\u7edf\u6e90\u7801\u76ee\u5f55\u4e3a  ",(0,p.kt)("inlineCode",{parentName:"p"},"drivers/pinctrl"),"\u3002"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'&iomuxc {\n    pinctrl-names = "default";\n    pinctrl-0 = <&pinctrl_hog_1>;\n    imx6ul-evk {\n        pinctrl_hog_1: hoggrp-1 {\n            fsl,pins = <\n                MX6UL_PAD_UART1_RTS_B__GPIO1_IO19   0x17059 /* SD1 CD */\n                MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT    0x17059 /* SD1 VSELECT */\n                MX6UL_PAD_GPIO1_IO09__GPIO1_IO09        0x17059 /* SD1 RESET */\n            >;\n        };\n\n        pinctrl_csi1: csi1grp {\n            fsl,pins = <\n                MX6UL_PAD_CSI_MCLK__CSI_MCLK        0x1b088\n                MX6UL_PAD_CSI_PIXCLK__CSI_PIXCLK    0x1b088\n                MX6UL_PAD_CSI_VSYNC__CSI_VSYNC      0x1b088\n                MX6UL_PAD_CSI_HSYNC__CSI_HSYNC      0x1b088\n                MX6UL_PAD_CSI_DATA00__CSI_DATA02    0x1b088\n                MX6UL_PAD_CSI_DATA01__CSI_DATA03    0x1b088\n                MX6UL_PAD_CSI_DATA02__CSI_DATA04    0x1b088\n                MX6UL_PAD_CSI_DATA03__CSI_DATA05    0x1b088\n                MX6UL_PAD_CSI_DATA04__CSI_DATA06    0x1b088\n                MX6UL_PAD_CSI_DATA05__CSI_DATA07    0x1b088\n                MX6UL_PAD_CSI_DATA06__CSI_DATA08    0x1b088\n                MX6UL_PAD_CSI_DATA07__CSI_DATA09    0x1b088\n            >;\n        };\n\n')),(0,p.kt)("p",null,"\u6bcf\u4e2a\u5b50\u8282\u70b9\u5c31\u662f\u8fd9\u5916\u8bbe\u6240\u80fd\u4f7f\u7528\u7684PIN"),(0,p.kt)("p",null,"\u4e00\u4e2a\u914d\u7f6e\u590d\u7528\u529f\u80fd\uff0c\u4e00\u4e2a\u8bbe\u7f6e\u7535\u6c14\u5c5e\u6027"),(0,p.kt)("p",null,"\u5148\u770bMX6UL_PAD_UART1_RTS_B__GPIO1_IO19\uff0c\u8fd9\u4e2a\u662f\u5b9a\u4e49\u5728",(0,p.kt)("inlineCode",{parentName:"p"},"arch/arm/boot/dts/imx6ul-pinfunc.h"),"\u91cc\u7684\uff0c\u88abimx6ull.dtsi\u5f15\u7528"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"#define MX6UL_PAD_UART1_RTS_B__GPIO1_IO19                         0x0090 0x031C 0x0000 0x5 0x0\n")),(0,p.kt)("p",null,"\u5b8f\u5b9a\u4e49\u90a3\u4e2a\u5934\u6587\u4ef6\u91cc\u6709\u5f88\u591aMX6UL_PAD_UART1_RTS_B\u5f00\u5934\u7684\uff0c\u5bf9\u5e94\u77408\u4e2a\u590d\u7528\u7684IO"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/6506f34b661c6c8e545f3c25",alt:"image-20230917203827174"})),(0,p.kt)("p",null,"\u540e\u9762\u4e94\u4e2a\u6570\u5b57\u5bf9\u5e94"),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"<mux_reg  conf_reg  input_reg  mux_mode  input_val>"),(0,p.kt)("p",{parentName:"blockquote"},"0x0090\t 0x031C \t0x0000 \t0x5 \t0x0")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"mux_reg")," \uff1amux_reg\u7684\u504f\u79fb\u5730\u5740\uff0c\u5373\u8bbe\u5907\u6811 iomuxc \u8282\u70b9\u7684reg\u5730\u5740+\u504f\u79fb"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/6506f402661c6c8e545f5a8c",alt:"image-20230917204137982"})),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"conf_reg")," \uff1aconf_reg\u5bc4\u5b58\u5668\u504f\u79fb\u5730\u5740\uff0c\u5bc4\u5b58\u5668  IOMUXC_SW_PAD_CTL_PAD_UART1_RTS_B "),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"input_reg")," \uff1a\u6709\u4e9b\u5916\u8bbe\u6709Input_reg\u5bc4\u5b58\u5668"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"mux_mode"),"\uff1amux_reg\u5bc4\u5b58\u5668\u503c\uff0c\u914d\u7f6e\u4e3aPIN\u590d\u7528\u4e3aGPIO1_IO19"),(0,p.kt)("p",null,"input_val\uff1ainput_reg\u7684\u503c"),(0,p.kt)("p",null,"\u200b\t"),(0,p.kt)("p",null,"\u518d\u770b\u90a3\u4e00\u5768\u6587\u5b57\u7684\u53f3\u8fb9\u7684\u6570\u5b57\uff1a",(0,p.kt)("inlineCode",{parentName:"p"},"0x17059"),"\uff0c\u7528\u4e8e\u8bbe\u7f6econf_reg\u5bc4\u5b58\u5668\u503c\uff0c\u8bbe\u7f6eIO\u7684\u4e0a\u4e0b\u62c9\u9a71\u52a8\u80fd\u529b\u901f\u5ea6\u7b49\u7b49"),(0,p.kt)("p",null,"\u5728 \u8fd9 \u91cc \u5c31 \u76f8 \u5f53 \u4e8e \u8bbe \u7f6e \u5bc4 \u5b58 \u5668 IOMUXC_SW_PAD_CTL_PAD_UART1_RTS_B \u7684\u503c\u4e3a 0x17059"),(0,p.kt)("h4",{id:"\u7701\u6d41"},"\u7701\u6d41"),(0,p.kt)("p",null,"\u5728imx6ull-alientek-emmc.dts\uff0c  iomuxc \u8282\u70b9 \u4e2d\u7684\u201cimx6ul-evk\u201d\u5b50\u8282\u70b9\u4e0b\u6dfb\u52a0\u201cpinctrl_test\u201d\u8282\u70b9"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"}," pinctrl_test: testgrp {\n     fsl,pins = <\n     /* \u8bbe\u5907\u6240\u4f7f\u7528\u7684 PIN \u914d\u7f6e\u4fe1\u606f    */\n         MX6UL_PAD_GPIO1_IO00__GPIO1_IO00  config /*config \u662f\u5177\u4f53\u8bbe\u7f6e\u503c\uff0c\u6bd4\u59820x17059*/\n     >;\n };\n")),(0,p.kt)("p",null,"\u6dfb\u52a0\u5b8c\u4e86..."),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"gpio1 \u8282\u70b9\u4fe1\u606f\u63cf\u8ff0\u4e86 GPIO1 \u63a7\u5236\u5668\u7684\u6240\u6709\u4fe1\u606f\uff0c\u91cd\u70b9\u5c31\u662f GPIO1 \u5916\u8bbe\u5bc4\u5b58\u5668\u57fa\u5730\u5740\u4ee5\u53ca\u517c\u5bb9\u5c5e\u6027 \u3002\u5173\u4e8e I.MX \u7cfb\u5217 SOC \u7684 GPIO \u63a7 \u5236 \u5668 \u7ed1 \u5b9a \u4fe1 \u606f \u8bf7 \u67e5 \u770b \u6587 \u6863 Documentation/devicetree/bindings/gpio/ fsl-imx-gpio.txt")),(0,p.kt)("h3",{id:"gpio\u5b50\u7cfb\u7edf\u9a71\u52a8"},"GPIO\u5b50\u7cfb\u7edf\u9a71\u52a8"),(0,p.kt)("p",null,"\u901a\u8fc7\u4e0a\u8ff0\u914d\u7f6e\u597dpinctrl\u540e\uff0c\u53ef\u4ee5\u5f00\u59cb\u914d\u7f6egpio\u5b50\u7cfb\u7edf\u4e86"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'&usdhc1 {\n    pinctrl-names = "default", "state_100mhz", "state_200mhz";\n    pinctrl-0 = <&pinctrl_usdhc1>;\n    pinctrl-1 = <&pinctrl_usdhc1_100mhz>;\n    pinctrl-2 = <&pinctrl_usdhc1_200mhz>;\n    \n    /* pinctrl-3 = <&pinctrl_hog_1>; */\n    cd-gpios = <&gpio1 19 GPIO_ACTIVE_LOW>;\n    \n    keep-power-in-suspend;\n    enable-sdio-wakeup;\n    vmmc-supply = <&reg_sd1_vmmc>;\n    status = "okay";\n};\n')),(0,p.kt)("p",null,"\u6ce8\u91ca\u90a3\u884c\u53ef\u4ee5\u7406\u89e3\u4e3aLinux\u81ea\u5df1\u4f1a\u521d\u59cb\u5316pinctrl_hog_1\u8fd9\u4e2apin"),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"\u56e0\u4e3a\u5728\u201ciomuxc\u201d\u8282\u70b9\u4e0b\u5f15\u7528\u4e86 pinctrl_hog_1\u8fd9\u4e2a\u8282\u70b9\uff0c\u6240\u4ee5 Linux \u5185\u6838\u4e2d\u7684 iomuxc \u9a71\u52a8\u5c31\u4f1a\u81ea\u52a8\u521d\u59cb\u5316 pinctrl_hog_1\u8282\u70b9\u4e0b\u7684\u6240\u6709 PIN\u2014\u2014\u6b63\u70b9\u539f\u5b50"),(0,p.kt)("pre",{parentName:"blockquote"},(0,p.kt)("code",{parentName:"pre",className:"language-c"},'&iomuxc {\n    pinctrl-names = "default";\n    pinctrl-0 = <&pinctrl_hog_1>;\n    imx6ul-evk {\n        pinctrl_hog_1: hoggrp-1 {\n            fsl,pins = <\n                MX6UL_PAD_UART1_RTS_B__GPIO1_IO19   0x17059 /* SD1 CD */\n                MX6UL_PAD_GPIO1_IO05__USDHC1_VSELECT    0x17059 /* SD1 VSELECT */\n                MX6UL_PAD_GPIO1_IO09__GPIO1_IO09        0x17059 /* SD1 RESET */\n            >;\n        };\n')),(0,p.kt)("p",{parentName:"blockquote"},"\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u662f\u6709\u521d\u59cb\u5316\uff0c\u4f46\u7528\u9014\u4e0d\u660e\uff0c\u53ef\u80fd\u662f\u4e3a\u4e86\u68c0\u6d4b\u70ed\u63d2\u62d4\u7684SD\u5361")),(0,p.kt)("p",null,"\u6ce8\u91ca\u4e0b\u9762\u7684\u5c31\u662fcd\u5f15\u811a"),(0,p.kt)("p",null,"\u5c5e\u6027\u201ccd-gpios\u201d\u63cf\u8ff0\u4e86 SD \u5361\u7684 CD \u5f15\u811a\u4f7f\u7528\u7684\u54ea\u4e2a IO\u3002\u5c5e\u6027\u503c\u4e00\u5171\u6709\u4e09\u4e2a"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"&gpio1"),"\uff1a\u4ee3\u8868\u662fIO\u5c5e\u4e8e\u54ea\u4e00\u4e2a\u7ec4"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"19"),"\uff1a\u4ee3\u8868\u90a3\u7ec4\u768419\u53f7"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"GPIO_ACTIVE_LOW"),"\uff1a\u4f4e\u7535\u5e73\u6709\u6548")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'gpio1: gpio@0209c000 {\n    compatible = "fsl,imx6ul-gpio", "fsl,imx35-gpio";\n    reg = <0x0209c000 0x4000>;\n    interrupts = <GIC_SPI 66 IRQ_TYPE_LEVEL_HIGH>,\n                <GIC_SPI 67 IRQ_TYPE_LEVEL_HIGH>;\n    gpio-controller;\n    #gpio-cells = <2>;\n    interrupt-controller;\n    #interrupt-cells = <2>;\n};\n')),(0,p.kt)("p",null,"gpio1 \u8282\u70b9\u4fe1\u606f\u63cf\u8ff0\u4e86 ",(0,p.kt)("strong",{parentName:"p"},"GPIO1 \u63a7\u5236\u5668\u7684\u6240\u6709\u4fe1\u606f"),"\uff0c\u91cd\u70b9\u5c31\u662f GPIO1 ",(0,p.kt)("inlineCode",{parentName:"p"},"\u5916\u8bbe\u5bc4\u5b58\u5668\u57fa\u5730\u5740"),"\u4ee5\u53ca",(0,p.kt)("inlineCode",{parentName:"p"},"\u517c\u5bb9\u5c5e\u6027 ")),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"\u5173 \u4e8e I.MX \u7cfb\u5217 SOC \u7684 GPIO \u63a7 \u5236 \u5668 \u7ed1 \u5b9a \u4fe1 \u606f \u8bf7 \u67e5 \u770b \u6587 \u6863Documentation/devicetree/bindings/gpio/fsl-imx-gpio.txt"),(0,p.kt)("p",{parentName:"blockquote"},(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/6509473d204c2e34d3e5575d",alt:"image-20230919143314067"})),(0,p.kt)("p",{parentName:"blockquote"},"\u5176\u5b9e\u4ed6\u90a3\u4e2acell\u6211\u662f\u6ca1\u61c2\u7684...")),(0,p.kt)("h4",{id:"gpio-\u9a71\u52a8\u7a0b\u5e8f"},"GPIO \u9a71\u52a8\u7a0b\u5e8f"),(0,p.kt)("p",null,"\u5728",(0,p.kt)("inlineCode",{parentName:"p"},"/drivers/gpio/gpio-mxc.c"),"\u4e2d\u627e\u5230\u4e86\u76f8\u5bf9\u5e94\u7684\u9a71\u52a8\uff0c\u8fd9\u73a9\u610f\u5c31\u662f6ull\u7684GPIO\u9a71\u52a8\u6587\u4ef6"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'static const struct of_device_id mxc_gpio_dt_ids[] = {\n    { .compatible = "fsl,imx1-gpio", .data = &mxc_gpio_devtype[IMX1_GPIO], },\n    { .compatible = "fsl,imx21-gpio", .data = &mxc_gpio_devtype[IMX21_GPIO], },\n    { .compatible = "fsl,imx31-gpio", .data = &mxc_gpio_devtype[IMX31_GPIO], },\n    { .compatible = "fsl,imx35-gpio", .data = &mxc_gpio_devtype[IMX35_GPIO], },\n    { /* sentinel */ }\n};\n')),(0,p.kt)("p",null,"\u8fd8\u662f\u7ecf\u5178\u7684of_device_id\u88c5\u6709compatible\u5c5e\u6027\u7528\u4e8e\u5339\u914d\u8bbe\u5907\u6811"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/65094a79204c2e34d3e7068b",alt:"image-20230919151504557"})),(0,p.kt)("p",null,"gpiolib\u5f00\u5934\u7684\u90fd\u4e3aGPIO\u9a71\u52a8\u7684\u6838\u5fc3\u6587\u4ef6"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'static struct platform_driver mxc_gpio_driver = {\n    .driver     = {\n        .name   = "gpio-mxc",\n        .of_match_table = mxc_gpio_dt_ids,\n    },\n    .probe      = mxc_gpio_probe,\n    .id_table   = mxc_gpio_devtype,\n};\n')),(0,p.kt)("p",null,"GPIO\u9a71\u52a8\u4e5f\u662f\u4e2a\u5e73 \u53f0\u8bbe\u5907\u9a71\u52a8\uff0c\u56e0\u6b64\u5f53\u8bbe\u5907\u6811\u4e2d\u7684\u8bbe\u5907\u8282\u70b9\u4e0e\u9a71\u52a8\u7684of_device_id \u5339\u914d\u4ee5\u540e probe \u51fd\u6570\u5c31\u4f1a\u6267\u884c"),(0,p.kt)("p",null,"\u8fd9\u51fd\u6570\u6709\u70b9\u957f\u554a..."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'struct mxc_gpio_port {//\u8fd9\u73a9\u610f\u5c31\u662f\u5bf96uGPIO\u7684\u62bd\u8c61\n    struct list_head node;\n    void __iomem *base;\n    int irq;\n    int irq_high;\n    struct irq_domain *domain;\n    struct bgpio_chip bgc;//\u8fd9\u54e5\u4eec\n    u32 both_edges;\n};\n//\u63cf\u8ff0 GPIO \u5bc4\u5b58\u5668\u7ec4\nstatic struct mxc_gpio_hwdata imx35_gpio_hwdata = {\n    .dr_reg     = 0x00,\n    .gdir_reg   = 0x04,\n    .psr_reg    = 0x08,\n    .icr1_reg   = 0x0c,\n    .icr2_reg   = 0x10,\n    .imr_reg    = 0x14,\n    .isr_reg    = 0x18,\n    .edge_sel_reg   = 0x1c,\n    .low_level  = 0x00,\n    .high_level = 0x01,\n    .rise_edge  = 0x02,\n    .fall_edge  = 0x03,\n};\n//\u83b7\u53d6GPIIO\u786c\u4ef6\u6570\u636e\uff08\u5c31\u662fGPIO\u5bc4\u5b58\u5668\u7ec4\nstatic void mxc_gpio_get_hw(struct platform_device *pdev)\n{\n    const struct of_device_id *of_id =\n            of_match_device(mxc_gpio_dt_ids, &pdev->dev);\n    enum mxc_gpio_hwtype hwtype;\n\n    if (of_id)\n        pdev->id_entry = of_id->data;\n    hwtype = pdev->id_entry->driver_data;\n\n    if (mxc_gpio_hwtype) {\n        /*\n         * The driver works with a reasonable presupposition,\n         * that is all gpio ports must be the same type when\n         * running on one soc.\n         */\n        BUG_ON(mxc_gpio_hwtype != hwtype);\n        return;\n    }\n/*mxc_gpio_hwdata \u662f\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5982\u679c\u786c\u4ef6\u7c7b\u578b\u662f IMX35_GPIO \u7684\u8bdd\u8bbe\u7f6e \nmxc_gpio_hwdat \u4e3a imx35_gpio_hwdata\u3002\u5bf9\u4e8e I.MX6ULL \u800c\u8a00\uff0c\u786c\u4ef6\u7c7b\u578b\u5c31\u662f IMX35_GPIO\uff0cimx35_gpio_hwdata \u662f\u4e2a\u7ed3\u6784\u4f53\u53d8\u91cf\uff0c\u63cf\u8ff0\u4e86 GPIO \u5bc4\u5b58\u5668\u7ec4*/\n    //\u6709\u70b9\u9006\u5929\u7684\uff0c\u5f00\u4e863\u4e2a\u9759\u6001\u7684struct\uff0c\u4e3a\u4e86\u5339\u914d\n    if (hwtype == IMX35_GPIO)\n        mxc_gpio_hwdata = &imx35_gpio_hwdata;\n    else if (hwtype == IMX31_GPIO)\n        mxc_gpio_hwdata = &imx31_gpio_hwdata;\n    else\n        mxc_gpio_hwdata = &imx1_imx21_gpio_hwdata;\n\n    mxc_gpio_hwtype = hwtype;\n}\n\n\nstatic int mxc_gpio_probe(struct platform_device *pdev)\n{\n    struct device_node *np = pdev->dev.of_node;//\u8bbe\u5907\u6811\u8282\u70b9\u6307\u9488\n    struct mxc_gpio_port *port;//gpio-mxc.c\u7684\u91cd\u70b9\u5de5\u4f5c\u5c31\u662f\u7ef4\u62a4\u8be5\u7ed3\u6784\u4f53\n    struct resource *iores;\n    int irq_base;\n    int err;\n\n    mxc_gpio_get_hw(pdev);//\u83b7\u53d6GPIIO\u786c\u4ef6\u6570\u636e\uff08\u5c31\u662fGPIO\u5bc4\u5b58\u5668\u7ec4\n\n    port = devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL);\n    if (!port)\n        return -ENOMEM;\n    //\u83b7\u53d6\u8bbe\u5907\u6811\u4e2d\u5185\u5b58\u8d44\u6e90\u4fe1\u606f\uff0creg\u5c5e\u6027\n    iores = platform_get_resource(pdev, IORESOURCE_MEM, 0);\n    //\u5185\u5b58\u6620\u5c04\uff0c\u5f97\u52300x0209C000\u5728Linux\u5185\u7684\u865a\u62df\u5730\u5740\n    port->base = devm_ioremap_resource(&pdev->dev, iores);\n    if (IS_ERR(port->base))\n        return PTR_ERR(port->base);\n\n    port->irq_high = platform_get_irq(pdev, 1);//\u83b7\u53d6\u4e2d\u65ad\u53f7\n    port->irq = platform_get_irq(pdev, 0);\n    if (port->irq < 0)\n        return port->irq;\n\n    /* disable the interrupt and clear the status */\n    writel(0, port->base + GPIO_IMR);\n    writel(~0, port->base + GPIO_ISR);\n    //\u8bbe\u7f6e\u4e2d\u65ad\u670d\u52a1\u51fd\u6570\n    if (mxc_gpio_hwtype == IMX21_GPIO) {\n        /*\n         * Setup one handler for all GPIO interrupts. Actually setting\n         * the handler is needed only once, but doing it for every port\n         * is more robust and easier.\n         */\n        irq_set_chained_handler(port->irq, mx2_gpio_irq_handler);\n    } else {\n        /* setup one handler for each entry */\n        irq_set_chained_handler(port->irq, mx3_gpio_irq_handler);\n        irq_set_handler_data(port->irq, port);\n        if (port->irq_high > 0) {\n            /* setup handler for GPIO 16 to 31 */\n            irq_set_chained_handler(port->irq_high,\n                        mx3_gpio_irq_handler);\n            irq_set_handler_data(port->irq_high, port);\n        }\n    }\n    //bgc->gc\u662fgpio_chip\u63a5\u56fa\u4f53\u53d8\u91cf\uff0c\u62bd\u8c61\u51fa\u6765\u7684GPIO\u63a7\u5236\u5668\uff0c\u5927\u90e8\u5206\u662f\u51fd\u6570\n    err = bgpio_init(&port->bgc, &pdev->dev, 4,\n             port->base + GPIO_PSR,\n             port->base + GPIO_DR, NULL,\n             port->base + GPIO_GDIR, NULL, 0);\n/*bgpio_init\u91cc\u9762\u6709\u4e09\u4e2asetup\u51fd\u6570\uff1abgpio_setup_io\u3001 bgpio_setup_accessors \u548c bgpio_setup_direction\u3002\u8fd9\u4e09\u4e2a\u51fd\u6570\u5c31\u662f\u521d\u59cb\u5316 bgc->gc \u4e2d\u7684\u5404\u79cd\u6709\u5173GPIO \u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\u8f93\u51fa\uff0c\u8f93\u5165\u7b49\u7b49\nGPIO_PSR\u3001GPIO_DR\u548cGPIO_GDIR\u90fd\u662fI.MX6ULL\u7684GPIO\u5bc4\u5b58\u5668\u3002\u8fd9\u4e9b\u5bc4\u5b58\u5668\u5730\u5740\u4f1a\u8d4b\u503c\u7ed9bgc\u53c2\u6570\u7684reg_dat\u3001reg_set\u3001reg_clr \u548c reg_dir \u8fd9\u4e9b\u6210\u5458\u53d8\u91cf*/\n    if (err)\n        goto out_bgio;\n\n    port->bgc.gc.to_irq = mxc_gpio_to_irq;\n    port->bgc.gc.base = (pdev->id < 0) ? of_alias_get_id(np, "gpio") * 32 :\n                         pdev->id * 32;\n//\u5411 Linux \u5185\u6838\u6ce8\u518c gpio_chip,\u4e5f\u5c31\u662fport->bgc.gc\n//\u6ce8\u518c\u5b8c\u6210\u4ee5\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u9a71\u52a8\u4e2d\u4f7f\u7528gpiolib\u63d0\u4f9b\u7684\u5404\u4e2aAPI\u51fd\u6570\u3002\n    err = gpiochip_add(&port->bgc.gc);\n    if (err)\n        goto out_bgpio_remove;\n\n    irq_base = irq_alloc_descs(-1, 0, 32, numa_node_id());\n    if (irq_base < 0) {\n        err = irq_base;\n        goto out_gpiochip_remove;\n    }\n\n    port->domain = irq_domain_add_legacy(np, 32, irq_base, 0,\n                         &irq_domain_simple_ops, NULL);\n    if (!port->domain) {\n        err = -ENODEV;\n        goto out_irqdesc_free;\n    }\n\n    /* gpio-mxc can be a generic irq chip */\n    mxc_gpio_init_gc(port, irq_base);\n\n    list_add_tail(&port->node, &mxc_gpio_ports);\n\n    return 0;\n\nout_irqdesc_free:\n    irq_free_descs(irq_base, 32);\nout_gpiochip_remove:\n    gpiochip_remove(&port->bgc.gc);\nout_bgpio_remove:\n    bgpio_remove(&port->bgc);\nout_bgio:\n    dev_info(&pdev->dev, "%s failed with errno %d\\n", __func__, err);\n    return err;\n}\n')),(0,p.kt)("h4",{id:"gpio\u5b50\u7cfb\u7edfapi\u51fd\u6570"},"GPIO\u5b50\u7cfb\u7edfAPI\u51fd\u6570"),(0,p.kt)("p",null,"\u8bbe\u7f6e\u597d\u8bbe\u5907\u6811\u4e4b\u540e\u5c31\u53ef\u4ee5\u7528\u4ed6\u7684API\u6765\u64cd\u4f5c\u4e86\uff0c\u56e0\u4e3a\u521a\u521a\u7684\u5b50\u7cfb\u7edf\u5c4f\u853d\u4e86\u5177\u4f53\u8bfb\u5199\u5bc4\u5b58\u5668\u7684\u8fc7\u7a0b\uff0c\u9a71\u52a8\u5206\u5c42\u548c\u5206\u79bb\u4e86"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"int gpio_request(unsigned gpio,  const char *label)"),"\uff1a\u7533\u8bf7\u4e00\u4e2aGPIO\uff0c\u7528\u4e4b\u524d\u4e00\u5b9a\u8981\u7533\u8bf7"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"void gpio_free(unsigned gpio)"),"\uff1a\u91ca\u653e"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"int gpio_direction_input(unsigned gpio)"),"\uff1a\u8bbe\u7f6e\u4e3a\u8f93\u5165"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"int gpio_direction_output(unsigned gpio)"),"\uff1a\u8bbe\u7f6e\u4e3a\u8f93\u51fa"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"#define gpio_get_value  __gpio_get_value \nint __gpio_get_value(unsigned gpio)"),"\uff1a\u83b7\u53d6GPIO\u7684\u503c"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"#define gpio_set_value  __gpio_set_value \nvoid __gpio_set_value(unsigned gpio, int value)"),"\uff1a\u8bbe\u7f6e\u67d0\u4e2aGPIO\u7684\u503c")),(0,p.kt)("h4",{id:"\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0--gpio-\u8282\u70b9\u6a21\u677f"},"\u8bbe\u5907\u6811\u4e2d\u6dfb\u52a0  gpio \u8282\u70b9\u6a21\u677f"),(0,p.kt)("p",null,"\u5728\u6839\u8282\u70b9\u4e0b\u6dfb\u52a0"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},'    gpioled{\n        #address_cells = <1>;\n        #size_cells = <1>;\n        compatible = "atkalpha-gpioled";\n        pinctrl-names = "default";\n        pinctrl-0 = <&pinctrl_led>;\n        led-gpio = <&gpio1 3 GPIO_ACTIVE_LOW>;\n        status = "okay";\n    };\n')),(0,p.kt)("p",null,"\u5728iomuxc\u4e0b\u4e5f\u52a0\u5165"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"        pinctrl_led:ledgrp{\n            fsl,pins = <\n                MX6UL_PAD_GPIO1_IO03__GPIO1_IO03 0x10B0 /* LED0 */\n            >;\n        };\n")),(0,p.kt)("admonition",{type:"warning"},(0,p.kt)("p",{parentName:"admonition"},"\u8bb0\u5f97\u68c0\u67e5PIN\u662f\u5426\u88ab\u5176\u4ed6\u5916\u8bbe\u4f7f\u7528\uff0c\u76f4\u63a5\u641c\u5e94\u8be5\u5c31\u597d"),(0,p.kt)("p",{parentName:"admonition"},(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650a9a7fc458853aef5bc920",alt:"image-20230920150839289"})),(0,p.kt)("p",{parentName:"admonition"},(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650a9abac458853aef5bdca7",alt:"image-20230920150945979"})),(0,p.kt)("p",{parentName:"admonition"},"\u8fd9\u4e24\u5a03\u6ce8\u91ca\u6389\u5c31\u597d")),(0,p.kt)("h2",{id:"\u5e76\u53d1\u4e0e\u7ade\u4e89"},"\u5e76\u53d1\u4e0e\u7ade\u4e89"),(0,p.kt)("h4",{id:"\u539f\u5b50\u64cd\u4f5c"},"\u539f\u5b50\u64cd\u4f5c"),(0,p.kt)("p",null,"linux\u5185\u6838\u5b9a\u4e49\u4e86",(0,p.kt)("inlineCode",{parentName:"p"},"atomic_t"),"\u7ed3\u6784\u4f53\u5b8c\u6210\u6574\u5f62\u6570\u636e\u7684\u539f\u5b50\u64cd\u4f5c"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct {\n int counter;\n } atomic_t;\n\n")),(0,p.kt)("p",null,"atomic_t b = ATOMIC_INIT(0);   //\u5b9a\u4e49\u539f\u5b50\u53d8\u91cf  b \u5e76\u8d4b\u521d\u503c\u4e3a  0"),(0,p.kt)("p",null,"\u5176\u4f59API\u64cd\u4f5c\u5982\u4e0b\uff1a"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d18cac458853aef2652af",alt:"image-20230922123201420"})),(0,p.kt)("h4",{id:"\u539f\u5b50\u4f4d\u64cd\u4f5capi"},"\u539f\u5b50\u4f4d\u64cd\u4f5cAPI"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d196fc458853aef2677d2",alt:"image-20230922123453812"})),(0,p.kt)("h4",{id:"\u81ea\u65cb\u9501"},"\u81ea\u65cb\u9501"),(0,p.kt)("admonition",{type:"tip"},(0,p.kt)("p",{parentName:"admonition"},"\u81ea\u65cb\u9501\u9002\u7528\u4e8e\u77ed\u65f6\u671f\u7684\u8f7b\u91cf\u7ea7\u52a0\u9501\uff0c\u5982\u679c\u957f\u65f6\u95f4\u7b49\u5f85\u53ef\u80fd\u4f1a\u6d6a\u8d39\u5904\u7406\u5668\u65f6\u95f4")),(0,p.kt)("p",null,"linux\u5185\u6838\u7528",(0,p.kt)("inlineCode",{parentName:"p"},"spinlock_t"),"\u8868\u793a\u81ea\u65cb\u9501"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"64 typedef struct spinlock {\n65    union {\n66        struct raw_spinlock rlock;\n67\n68 #ifdef CONFIG_DEBUG_LOCK_ALLOC\n69 # define LOCK_PADSIZE (offsetof(struct raw_spinlock, dep_map))\n70        struct {\n71           u8 __padding[LOCK_PADSIZE];\n72 struct lockdep_map dep_map;\n73        };\n74 #endif\n75    };\n76 } spinlock_t;\n")),(0,p.kt)("p",null,"\u5176API\uff1a"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d1e51c458853aef27515e",alt:"image-20230922125543020"})),(0,p.kt)("p",null,"\u88ab\u81ea\u65cb\u9501\u4fdd\u62a4\u7684\u4e34\u754c\u533a",(0,p.kt)("strong",{parentName:"p"},"\u4e00\u5b9a\u4e0d\u80fd"),"\u8c03\u7528\u4efb\u4f55\u80fd\u591f\u5f15\u8d77\u7761\u7720\u548c",(0,p.kt)("strong",{parentName:"p"},"\u963b\u585e\u7684API \u51fd\u6570"),"\uff0c\u5426\u5219\u7684\u8bdd\u4f1a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6b7b\u9501\u73b0\u8c61\u7684\u53d1\u751f"),(0,p.kt)("p",null,"\u6700\u597d\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u83b7\u53d6\u9501\u4e4b\u524d\u5173\u95ed\u672c\u5730\u4e2d\u65ad\uff08\u7ecf\u5178\u4e34\u754c\u533a\uff09"),(0,p.kt)("p",null,"\u5176API\u662f\uff1a"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d3d51c458853aef30e019",alt:"image-20230922150800211"})),(0,p.kt)("admonition",{type:"tip"},(0,p.kt)("p",{parentName:"admonition"},"\u5efa\u8bae\u7528\u4e0b\u9762\u4e24\u4e2a\u6765\u4fdd\u5b58\u4e2d\u65ad\u72b6\u6001"),(0,p.kt)("p",{parentName:"admonition"},"\u4e00\u822c\u5728\u7ebf\u7a0b\u4e2d\u4f7f\u7528 spin_lock_irqsave/spin_unlock_irqrestore\uff0c\u5728\u4e2d\u65ad\u4e2d\u4f7f\u7528 spin_lock/spin_unlock")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"\u4e0b\u534a\u90e8(BH)"),"\u4e5f\u4f1a\u7ade\u4e89\u5171\u4eab\u8d44\u6e90\uff0c\u6709\u4e9b\u8d44\u6599\u4e5f\u4f1a\u5c06\u4e0b\u534a\u90e8\u53eb\u505a\u5e95\u534a\u90e8\u3002"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"void spin_lock_bh(spinlock_t *lock)\uff1a\u5173\u95ed\u4e0b\u534a\u90e8\uff0c\u83b7\u53d6\u81ea\u65cb\u9501"),(0,p.kt)("li",{parentName:"ol"},"void spin_unlock_bh(spinlock_t *lock)\uff1a\u6253\u5f00\u4e0b\u534a\u90e8\uff0c\u5e76\u91ca\u653e\u81ea\u65cb\u9501\u3002")),(0,p.kt)("h4",{id:""}),(0,p.kt)("h4",{id:"\u5176\u4ed6\u7c7b\u578b\u7684\u9501"},"\u5176\u4ed6\u7c7b\u578b\u7684\u9501"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"\u8bfb\u5199\u81ea\u65cb\u9501"),"\u4e3a\u8bfb\u548c\u5199\u64cd\u4f5c\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u9501\uff0c",(0,p.kt)("strong",{parentName:"p"},"\u4e00\u6b21\u53ea\u80fd\u5141\u8bb8\u4e00\u4e2a\u5199\u64cd\u4f5c"),"\uff0c\u4e0d\u80fd\u8fdb\u884c\u8bfb\u64cd\u4f5c\u3002\u4f46\u662f\u5f53\u6ca1\u6709\u5199\u64cd\u4f5c\u7684\u65f6\u5019\u53ef\u4ee5\u8fdb\u884c",(0,p.kt)("strong",{parentName:"p"},"\u5e76\u53d1\u7684\u8bfb\u64cd\u4f5c"),"\u3002"),(0,p.kt)("p",null,"Linux \u5185\u6838\u4f7f\u7528 ",(0,p.kt)("inlineCode",{parentName:"p"},"rwlock_t "),"\u7ed3\u6784\u4f53\u8868\u793a\u8bfb\u5199\u9501"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct {\narch_rwlock_t raw_lock; \n} rwlock_t;\n")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"DEFINE_RWLOCK(rwlock_t lock)"),"\uff1a\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u8bfb\u5199\u9501"),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("inlineCode",{parentName:"li"},"void rwlock_init(rwlock_t *lock)"),"\uff1a\u521d\u59cb\u5316\u8bfb\u5199\u9501\u3002")),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d403ac458853aef328d32",alt:"image-20230922152025048"})),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d4041c458853aef328f09",alt:"image-20230922152032033"})),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"\u987a\u5e8f\u9501"),"\u662f\u8bfb\u5199\u9501\u7684\u57fa\u7840\u4e0a\u884d\u751f\u51fa\u6765\u7684"),(0,p.kt)("p",null,"\u8fd9\u73a9\u610f\u53ef\u4ee5\u5141\u8bb8\u5199\u7684\u65f6\u5019\u8bfb\uff0c\u4f46\u4e0d\u80fd\u5e76\u53d1\u5730\u5199"),(0,p.kt)("p",null,"\u987a\u5e8f\u9501\u4fdd\u62a4\u7684\u8d44\u6e90",(0,p.kt)("strong",{parentName:"p"},"\u4e0d\u80fd\u662f\u6307\u9488"),"\uff0c\u5728\u5199\u64cd\u4f5c\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6307\u9488\u65e0\u6548\uff0c\u800c\u8fd9\u4e2a\u65f6\u5019\u6070\u5de7\u6709\u8bfb\u64cd\u4f5c\u8bbf\u95ee\u6307\u9488\u7684\u8bdd\u5c31\u53ef\u80fd\u5bfc\u81f4\u610f\u5916\u53d1\u751f\uff0c\u6bd4\u5982\u8bfb\u53d6\u91ce\u6307\u9488\u5bfc\u81f4\u7cfb\u7edf\u5d29\u6e83\u3002"),(0,p.kt)("p",null,"Linux \u5185\u6838\u4f7f\u7528 seqlock_t \u7ed3\u6784\u4f53\u8868\u793a\u987a\u5e8f\u9501"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"typedef struct {\n    struct seqcount seqcount; \n    spinlock_t lock;\n} seqlock_t;\n")),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d43a1c458853aef33ca1e",alt:"image-20230922153455428"})),(0,p.kt)("p",null,"\u8bb0\u5f97\u6ce8\u610f\u51e0\u70b9\uff1a"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\u56e0\u4e3a\u5728\u7b49\u5f85\u81ea\u65cb\u9501\u7684\u65f6\u5019\u5904\u4e8e\u201c\u81ea\u65cb\u201d\u72b6\u6001\uff0c\u56e0\u6b64",(0,p.kt)("strong",{parentName:"p"},"\u9501\u7684\u6301\u6709\u65f6\u95f4\u4e0d\u80fd\u592a\u957f"),"\uff0c\u4e00\u5b9a\u8981\u77ed\uff0c\u5426\u5219\u7684\u8bdd\u4f1a\u964d\u4f4e\u7cfb\u7edf\u6027\u80fd\u3002\u5982\u679c\u4e34\u754c\u533a\u6bd4\u8f83\u5927\uff0c\u8fd0\u884c\u65f6\u95f4\u6bd4\u8f83\u957f\u7684\u8bdd\u8981\u9009\u62e9\u5176\u4ed6\u7684\u5e76\u53d1\u5904\u7406\u65b9\u5f0f\uff0c\u6bd4\u5982\u7a0d\u540e\u8981\u8bb2\u7684\u4fe1\u53f7\u91cf\u548c\u4e92\u65a5\u4f53\u3002")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\u81ea\u65cb\u9501\u4fdd\u62a4\u7684\u4e34\u754c\u533a\u5185",(0,p.kt)("strong",{parentName:"p"},"\u4e0d\u80fd\u8c03\u7528\u4efb\u4f55\u53ef\u80fd\u5bfc\u81f4\u7ebf\u7a0b\u4f11\u7720\u7684 API \u51fd\u6570"),"\uff0c\u5426\u5219\u7684\u8bdd\u53ef\u80fd\u5bfc\u81f4\u6b7b\u9501\u3002"),(0,p.kt)("blockquote",{parentName:"li"},(0,p.kt)("p",{parentName:"blockquote"},"\u5f88\u50cf\u5728\u4e34\u754c\u533a\u91cc\u52a0\u5165block\u7684\u4e32\u53e3\u63a5\u6536\u4e00\u6837\u9006\u5929"))),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\u4e0d\u80fd\u9012\u5f52\u7533\u8bf7\u81ea\u65cb\u9501\uff0c\u56e0\u4e3a\u4e00\u65e6\u901a\u8fc7\u9012\u5f52\u7684\u65b9\u5f0f\u7533\u8bf7\u4e00\u4e2a\u4f60\u6b63\u5728\u6301\u6709\u7684\u9501\uff0c\u90a3\u4e48\u4f60\u5c31\u5fc5\u987b\u201c\u81ea\u65cb\u201d\uff0c\u7b49\u5f85\u9501\u88ab\u91ca\u653e\uff0c\u7136\u800c\u4f60\u6b63\u5904\u4e8e\u201c\u81ea\u65cb\u201d\u72b6\u6001\uff0c\u6839\u672c\u6ca1\u6cd5\u91ca\u653e\u9501\u3002\u7ed3\u679c\u5c31\u662f\u81ea\u5df1\u628a\u81ea\u5df1\u9501\u6b7b\u4e86\uff01")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"\u5728\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f\u7684\u65f6\u5019\u6211\u4eec\u5fc5\u987b\u8003\u8651\u5230\u9a71\u52a8\u7684\u53ef\u79fb\u690d\u6027\uff0c\u56e0\u6b64\u4e0d\u7ba1\u4f60\u7528\u7684\u662f\u5355\u6838\u7684\u8fd8\u662f\u591a\u6838\u7684  SOC\uff0c\u90fd\u5c06\u5176\u5f53\u505a\u591a\u6838  SOC \u6765\u7f16\u5199\u9a71\u52a8\u7a0b\u5e8f\u3002"))),(0,p.kt)("h3",{id:"\u4fe1\u53f7\u91cf"},"\u4fe1\u53f7\u91cf"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u56e0\u4e3a\u4fe1\u53f7\u91cf\u53ef\u4ee5",(0,p.kt)("strong",{parentName:"li"},"\u4f7f\u7b49\u5f85\u8d44\u6e90\u7ebf\u7a0b\u8fdb\u5165\u4f11\u7720\u72b6\u6001"),"\uff0c\u56e0\u6b64\u9002\u7528\u4e8e\u90a3\u4e9b\u5360\u7528\u8d44\u6e90\u6bd4\u8f83\u4e45\u7684\u573a\u5408"),(0,p.kt)("li",{parentName:"ol"},"\u56e0\u6b64\u4fe1\u53f7\u91cf\u4e0d\u80fd\u7528\u4e8e\u4e2d\u65ad\u4e2d\uff0c\u56e0\u4e3a\u4fe1\u53f7\u91cf\u4f1a\u5f15\u8d77\u4f11\u7720\uff0c\u4e2d\u65ad\u4e0d\u80fd\u4f11\u7720"),(0,p.kt)("li",{parentName:"ol"},"\u5982\u679c\u5171\u4eab\u8d44\u6e90\u7684\u6301\u6709\u65f6\u95f4\u6bd4\u8f83\u77ed\uff0c\u90a3\u5c31\u4e0d\u9002\u5408\u4f7f\u7528\u4fe1\u53f7\u91cf\u4e86\uff0c\u56e0\u4e3a\u9891\u7e41\u7684\u4f11\u7720\u3001\u5207\u6362\u7ebf\u7a0b\u5f15\u8d77\u7684\u5f00\u9500\u8981\u8fdc\u5927\u4e8e\u4fe1\u53f7\u91cf\u5e26\u6765\u7684\u90a3\u70b9\u4f18\u52bf\u3002")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"struct semaphore {\n    raw_spinlock_t      lock; \n    unsigned int      count; \n    struct list_head    wait_list;\n};\n")),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d4517c458853aef3428b6",alt:"image-20230922154109674"})),(0,p.kt)("p",null,"\u4f7f\u7528\u793a\u4f8b"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"struct semaphore sem; /* \u5b9a\u4e49\u4fe1\u53f7\u91cf */\nsema_init(&sem, 1);//\u521d\u59cb\u5316\ndown(&sem);//\u7533\u8bf7\u4fe1\u53f7\u91cf,\u4f1a\u5bfc\u81f4\u4f11\u7720\u90a3\u79cd\n/* \u4e34\u754c\u533a */ \nup(&sem);   //\u91ca\u653e\n")),(0,p.kt)("h3",{id:"\u4e92\u65a5\u4f53"},"\u4e92\u65a5\u4f53"),(0,p.kt)("p",null,"mutex"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"struct mutex {\n    /* 1: unlocked, 0: locked, negative: locked, possible waiters */ \n    atomic_t        count;\n    spinlock_t      wait_lock; \n};\n")),(0,p.kt)("p",null,"\u4f7f\u7528mutex\u9700\u8981\u6ce8\u610f\uff1a"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"\u8fd9\u73a9\u610f\u4e5f\u53ef\u4ee5",(0,p.kt)("strong",{parentName:"li"},"\u5bfc\u81f4\u4f11\u7720"),"\uff01\u6240\u4ee5\u4e0d\u8981\u5728\u4e2d\u65ad\u4e2d\u4f7f\u7528mutex\uff0c\u4e2d\u65ad\u4e2d\u53ea\u80fd\u7528\u81ea\u65cb\u9501"),(0,p.kt)("li",{parentName:"ol"},"\u548c\u4fe1\u53f7\u91cf\u4e00\u6837\uff0cmutex \u4fdd\u62a4\u7684\u4e34\u754c\u533a\u4e0d\u53ef\u4ee5",(0,p.kt)("strong",{parentName:"li"},"\u8c03\u7528\u5f15\u8d77\u963b\u585e\u7684 API \u51fd\u6570\u3002")),(0,p.kt)("li",{parentName:"ol"},"\u56e0\u4e3a\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6301\u6709  mutex\uff0c\u56e0\u6b64\uff0c\u5fc5\u987b\u7531  mutex \u7684\u6301\u6709\u8005\u91ca\u653e  mutex\u3002\u5e76\u4e14  mutex \u4e0d\u80fd\u9012\u5f52\u4e0a\u9501\u548c\u89e3\u9501")),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/650d48bcc458853aef35474d",alt:"image-20230922155642229"})),(0,p.kt)("h3",{id:"\u5b9e\u4f8b"},"\u5b9e\u4f8b"),(0,p.kt)("h4",{id:"\u539f\u5b50\u9501"},"\u539f\u5b50\u9501"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"static int led_open(struct inode *inode, struct file *filp) {\n  //\u5224\u65ad\u539f\u5b50\u53d8\u91cf\u7684\u503c\u6765\u68c0\u67e5 LED \u6709\u6ca1\u6709\u88ab\u522b\u7684\u5e94\u7528\u4f7f\u7528\n  if(!atomic_dec_and_test(&gpio_led.lock)){\n    //\u5c0f\u4e8e 0 \u7684\u8bdd\u5c31\u52a0 1,\u4f7f\u5176\u539f\u5b50\u53d8\u91cf\u7b49\u4e8e 0\n    atomic_inc(&gpio_led.lock);\n    return -EBUSY;\n  }\n\n  filp->private_data = &gpio_led;\n  return 0;\n}\n\nstatic int __init led_init(void)\n{\n   int ret = 0;\n   /* \u521d\u59cb\u5316\u539f\u5b50\u53d8\u91cf   */\n   atomic_set(&gpioled.lock, 1);  /* \u539f\u5b50\u53d8\u91cf\u521d\u59cb\u503c\u4e3a 1 */\n")),(0,p.kt)("p",null,"\u6bcf\u6b21\u7528",(0,p.kt)("inlineCode",{parentName:"p"},"atomic_dec_and_test"),"\u51fd\u6570\u5c06lock-1\uff0c\u5982\u679c\u8fd4\u56de\u503c\u4e3atrue\u5c31\u8bf4\u660elock==0"),(0,p.kt)("p",null,"\u8bf4\u660e\u662f\u53ea\u6709\u4e00\u4e2a\u4eba\u7528"),(0,p.kt)("p",null,"\u5982\u679c\u8fd4\u56defalse\uff0c\u5c31\u8bf4\u660e\u662f\u8d1f\u7684\uff0c\u4e0a\u9762\u51fd\u6570-1\u4e4b\u540e\u5728\u7528atomic_inc+1\uff0c\u4f7f\u5176\u53d8\u56de0"),(0,p.kt)("h4",{id:"\u81ea\u65cb\u9501-1"},"\u81ea\u65cb\u9501"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"\nstatic int led_open(struct inode *inode, struct file *filp) {\n    unsigned long flags;\n\n    filp->private_data = &gpio_led;\n\n    // \u4e0a\u9501\n    spin_lock_irqsave(&gpio_led.lock, flags);\n    if (gpio_led.dev_stats) {//\u5982\u679c\u8bbe\u5907\u88ab\u4f7f\u7528\u4e86\n        spin_unlock_irqrestore(&gpio_led.lock, flags); /* \u89e3\u9501 */\n        return -EBUSY;\n    }\n    gpio_led.dev_stats++; /* \u5982\u679c\u8bbe\u5907\u6ca1\u6709\u6253\u5f00\uff0c\u90a3\u4e48\u5c31\u6807\u8bb0\u5df2\u7ecf\u6253\u5f00\u4e86 */\n    spin_unlock_irqrestore(&gpio_led.lock, flags); /* \u89e3\u9501   */\n    return 0;\n}\n\nstatic int led_release(struct inode *inode, struct file *filp) {\n    struct gpioled_dev *dev = filp->private_data;\n    unsigned long flags;\n    /* \u5173\u95ed\u9a71\u52a8\u6587\u4ef6\u7684\u65f6\u5019\u5c06 dev_stats \u51cf 1 */\n    spin_lock_irqsave(&dev->lock, flags);  /* \u4e0a\u9501    */\n\n    if (dev->dev_stats){\n        dev->dev_stats--;\n    }\n\n    spin_unlock_irqrestore(&gpio_led.lock, flags);\n    return 0;\n}\n\nstatic int __init led_init(void) {\n//\u521d\u59cb\u5316\u81ea\u65cb\u9501\n  spin_lock_init(&gpio_led.lock);\n\n")),(0,p.kt)("p",null,(0,p.kt)("inlineCode",{parentName:"p"},"dev_status"),">0\u4ee3\u8868\u8bbe\u5907\u5360\u7528"),(0,p.kt)("p",null,"\u611f\u89c9\u5199\u7684\u8fd8\u4e0d\u662f\u5f88\u4f18\u96c5\uff0c\u53ef\u80fdOS\u8bfe\u4e0a\u7684\u89e3\u6cd5\u66f4\u52a0elegant"),(0,p.kt)("h4",{id:"\u4fe1\u53f7\u91cf-1"},"\u4fe1\u53f7\u91cf"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"#include <linux/semaphore.h>\nstatic int led_open(struct inode *inode, struct file *filp) {\n\n    filp->private_data = &gpio_led;\n    /* \u83b7\u53d6\u4fe1\u53f7\u91cf,sem-1<0 */\n    if (down_interruptible(&gpio_led.sem)) {\n        return -ERESTARTSYS;\n    }\n    //\u6216\u8005\u7528down();\n    return 0;\n}\nstatic int led_release(struct inode *inode, struct file *filp) {\n    struct gpioled_dev *dev = filp->private_data;\n\n    up(&gpio_led.sem);//\u91ca\u653e\u4fe1\u53f7\u91cf\uff0c\u4fe1\u53f7\u91cf\u503c+1\n\n    return 0;\n}\n\nstatic int __init led_init(void) {\n  //\u521d\u59cb\u5316\u81ea\u65cb\u9501\n  sema_init(&gpio_led.sem, 1);\n\n")),(0,p.kt)("p",null,"\u600e\u4e48\u89e3\u91ca\u5462\uff1f"),(0,p.kt)("p",null,"led_open\u5c1d\u8bd5\u540e\uff0c\u7b2c\u4e00\u4e2a\u6765down\u7684\u4f1a\u5c06sem=1\u7684-1\uff0c\u6210\u529f\u83b7\u53d6\u4fe1\u53f7\u91cf\u540e\u8fd4\u56de0\uff0c\u8df3\u8fc7if"),(0,p.kt)("p",null,"\u5982\u679csem=0\u5c06\u4f1a\u628a\u7ebf\u7a0b/\u4efb\u52a1",(0,p.kt)("inlineCode",{parentName:"p"},"\u7761\u7720"),"\uff0c\u7b49\u5f85\u4fe1\u53f7\u91cf\u7684\u5230\u6765"),(0,p.kt)("p",null,"\u6709\u4fe1\u53f7\u91cf\uff08release\u540e\uff09\u624d\u4f1a\u8fd4\u56de0"),(0,p.kt)("p",null,"\u5982\u679c\u7761\u7720\u8fc7\u7a0b\u4e2d\u88ab\u4fe1\u53f7\u4e2d\u65ad\uff0c\u4f1a\u8fd4\u56de-EINTR"),(0,p.kt)("h4",{id:"\u4e92\u65a5\u91cf"},"\u4e92\u65a5\u91cf"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"static int led_open(struct inode *inode, struct file *filp) {\n\n    filp->private_data = &gpio_led;\n    /* \u83b7\u53d6\u4e92\u65a5\u4f53,\u53ef\u4ee5\u88ab\u4fe1\u53f7\u6253\u65ad    */\n    if(rt_mutex_lock_interruptible(&gpio_led.lock)){\n      return -ERESTARTSYS;\n    }\n\n// mutex_lock(&gpio_led.lock);//\u4e0d\u80fd\u88ab\u4fe1\u53f7\u6253\u65ad  \n\n    return 0;\n}\n\n\nstatic int led_release(struct inode *inode, struct file *filp) {\n    struct gpioled_dev *dev = filp->private_data;\n    //\u89e3\u9501\n    mutex_unlock(&gpio_led.lock);\n\n    return 0;\n}\nstatic int __init led_init(void) {\n\n  mutex_init(&gpio_led.lock);\n\n")),(0,p.kt)("h2",{id:"\u5b9a\u65f6\u5668"},"\u5b9a\u65f6\u5668"),(0,p.kt)("p",null,"linux\u5185\u6838\u7528\u5168\u5c40\u53d8\u91cfjiffies\u6765\u8bb0\u5f55\u7cfb\u7edf\u4ece\u542f\u52a8\u4ee5\u6765\u7684\u7cfb\u7edf\u8282\u62cd\u6570"),(0,p.kt)("p",null,"\u8282\u62cd\u9891\u7387\u6709100-1000\u4e0d\u7b49"),(0,p.kt)("p",null,"\u65f6\u949f\u6e90\u53ef\u80fd\u662fcortexa7\u91cc\u7684\u901a\u7528\u5b9a\u65f6\u5668"),(0,p.kt)("blockquote",null,(0,p.kt)("p",{parentName:"blockquote"},"\u5173\u4e8e",(0,p.kt)("inlineCode",{parentName:"p"},"jiffies"),"\u8282\u62cd\u53d8\u91cf\u6ea2\u51fa\u95ee\u9898\uff0clinux\u53ef\u80fd\u6709\u79cd\u673a\u5236\u53eb",(0,p.kt)("inlineCode",{parentName:"p"},"\u7ed5\u56de"),"\uff0c32\u4f4d\u7684\u5927\u6982\u82b149.7\u5929\uff081000Hz\uff09"),(0,p.kt)("p",{parentName:"blockquote"},(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/6512c9b0c458853aeff12fde",alt:"image-20230926200808971"})),(0,p.kt)("p",{parentName:"blockquote"},"\u5982\u679cunkown\u8d85\u8fc7\u4e86known\uff0ctime_after\u4f1a\u8fd4\u56de\u771f\uff0c\u76f8\u53cdtime_before\u4f1a\u8fd4\u56de\u5047"),(0,p.kt)("p",{parentName:"blockquote"},"eq\u662f\u52a0\u4e86=\u8fd9\u4e2a\u6761\u4ef6"),(0,p.kt)("p",{parentName:"blockquote"},"\u6240\u4ee5\u53ea\u8981\u7528\u8fd9\u4e2aAPI\u5c31\u53ef\u4ee5\u5224\u65ad\u7a0b\u5e8f\u662f\u5426\u8d85\u65f6")),(0,p.kt)("h4",{id:"jiffies\u4e0emsusns\u8f6c\u6362\u51fd\u6570"},"jiffies\u4e0ems/us/ns\u8f6c\u6362\u51fd\u6570"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/6512cacec458853aeff1b732",alt:"image-20230926201302481"})),(0,p.kt)("h3",{id:"\u5185\u6838\u5b9a\u65f6\u5668"},"\u5185\u6838\u5b9a\u65f6\u5668"),(0,p.kt)("p",null,"\u53ea\u9700\u8981\u63d0\u4f9b",(0,p.kt)("inlineCode",{parentName:"p"},"\u8d85\u65f6\u65f6\u95f4"),"(\u76f8\u5f53\u4e8e\u5b9a\u65f6\u503c)\u548c",(0,p.kt)("inlineCode",{parentName:"p"},"\u5b9a\u65f6\u5904\u7406\u51fd\u6570"),"\u5373\u53ef"),(0,p.kt)("p",null,"\u4e0d\u8fc7\u8fd9\u73a9\u610f\u8d85\u65f6\u540e\u4f1a\u81ea\u52a8\u5173\u95ed\uff0c\u9700\u8981\u91cd\u65b0\u5f00\u542f\u624d\u80fd\u5468\u671f\u6027\u8ba1\u65f6"),(0,p.kt)("p",null,"linux\u7528",(0,p.kt)("inlineCode",{parentName:"p"},"timer_list"),"\u6765\u8868\u793a\u5185\u6838\u5b9a\u65f6\u5668"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-c"},"struct timer_list {\n    /*\n     * All fields that change during normal runtime grouped to the\n     * same cacheline\n     */\n    struct list_head entry;\n    unsigned long expires;  //\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u8282\u62cd\u6570\n    struct tvec_base *base;\n\n    void (*function)(unsigned long);//\u5b9a\u65f6\u5904\u7406\u51fd\u6570\n    unsigned long data; //\u4f20\u9012\u7ed9function\u7684\u7684\u53c2\u6570\n\n    int slack;\n\n#ifdef CONFIG_TIMER_STATS\n    int start_pid;\n    void *start_site;\n    char start_comm[16];\n#endif\n#ifdef CONFIG_LOCKDEP\n    struct lockdep_map lockdep_map;\n#endif\n};\n")),(0,p.kt)("p",null,"how to use?"),(0,p.kt)("p",null,"\u5148\u5b9a\u4e49\u4e00\u4e2a\u8fd9\u4e2astruct\uff0c\u7136\u540e",(0,p.kt)("inlineCode",{parentName:"p"},"init_timer\uff08\uff09")),(0,p.kt)("p",null,"\u8bbe\u7f6e\u597d\u8d85\u65f6\u65f6\u95f4expires = jffies + msecs_to_jiffies(2000);/",(0,p.kt)("em",{parentName:"p"}," \u8d85\u65f6\u65f6\u95f4 2 \u79d2 "),"/"),(0,p.kt)("p",null,"\u548c\u8d85\u65f6\u5904\u7406\u51fd\u6570"),(0,p.kt)("p",null,"\u7136\u540e\u60f3\u5185\u6838\u6ce8\u518c\u5b9a\u65f6\u5668",(0,p.kt)("inlineCode",{parentName:"p"},"add_timer()"),"\uff0c\u6b64\u523b\u5c31\u4f1a\u9a6c\u4e0a\u8fd0\u884c"),(0,p.kt)("p",null,"\u4e4b\u540e\u5220\u9664\u7528",(0,p.kt)("inlineCode",{parentName:"p"},"del_timer()"),"\uff0c\u6216\u8005",(0,p.kt)("inlineCode",{parentName:"p"},"del_timer_sync()")),(0,p.kt)("h4",{id:"\u5185\u6838\u77ed\u5ef6\u65f6\u51fd\u6570"},"\u5185\u6838\u77ed\u5ef6\u65f6\u51fd\u6570"),(0,p.kt)("p",null,(0,p.kt)("img",{parentName:"p",src:"https://pic.imgdb.cn/item/6512d223c458853aeff303d3",alt:"image-20230926204419406"})))}u.isMDXComponent=!0}}]);